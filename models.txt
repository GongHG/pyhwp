엘리먼트 모델은 구체 모델을 결정하는 방법에 따라 단순 모델, 속성 결정 모델, 부모 
결정 모델 세 가지 종류가 있다.

== 단순 모델 ==

; 단순히 HWPTAG에 따라 구체 모델이 결정된다.


== 속성 결정 모델 ==

; 엘리먼트의 공통 속성에 따라 구체 모델이 결정된다.

HWPTAG: HWPTAG_CTRL_HEADER
추상 모델: Control
결정 속성: chid
구체 모델:
	CommonControl (Table, GShapeObject)
	SectionDef
	ColumnsDef
	NumberingControl (AutoNumbering, NewNumbering)
	PageNumberPosition
	Header
	Footer
	FootNote
	EndNote
	Field (FieldHyperLink)
	Bookmark

HWPTAG: HWPTAG_BIN_DATA
모델: BinData
결정 속성: flags
구체 모델: BinLink, BinEmbedded, BinStorage


== 부모 결정 모델 ==

; 부모 모델 인스턴스의 종류나 상태에 따라 구체 모델이 결정된다.

HWPTAG: HWPTAG_SHAPE_COMPONENT
모델: ShapeComponent
구체 모델:
	ShapeComponent : 부모타입이 ShapeComponent
	PrimaryShapeComponent : 부모타입이 PrimaryShapeComponent

HWPTAG: HWPTAG_LIST_HEADER
모델: ListHeader
구체 모델:
	ListHeader: 부모타입이 ShapeComponent
	TableCaption, TableCell: 부모 타입이 Table


= 레코드 파서 =

레코드 파서는 스트림 내의 레코드들을 사용가능한 모델 인스턴스로 변환한다.  
변환은 대략 레코드의 HWPTAG로 모델 타입을 결정하고, 레코드의 내용으로 모델 
인스턴스의 속성들을 파싱하는 작업으로 구성된다. 단 위에서 보듯 모델 타입은 
단순히 HWPTAG만으로 결정할 수 없으며, 문맥과 속성을 참고하여야 한다.

파서는 주어진 레코드의 "키" 모델 타입을 결정한 뒤, 이 키 모델 클래스와 협력하여 
구체 모델 타입을 결정하고, 모델 인스턴스를 생성한다. 이를 위해 키 모델 클래스는 
파서로부터 받은 HWPTAG와 레코드 내용에 따라 구체 모델 타입이나 속성 목록을 
파서에게 전달한다.

주어진 레코드가 단순 모델일 경우, 키 모델 타입이 곧 구체 모델이 된다.

주어진 레코드가 속성 결정 모델의 경우, 구체 모델 타입을 결정하는데 파싱된 속성을 
참조해야 하므로, 키 모델은 속성을 파싱하는 도중에 파서에게 구체 모델 타입을 
알려주어야 한다. 키 모델의 속성이 끝나면, 파서는 구체 모델의 속성을 파싱한 후 두 
속성집합을 결합하여 구체 모델 인스턴스를 생성한다.

주어진 레코드가 부모 결정 모델인 경우, 파서는 부모 모델 인스턴스에게 레코드를 
전달하여 모델 인스턴스를 생성한다. 따라서 파서는 부모 모델 인스턴스를 파싱 
문맥에 유지하고 있어야 하며, 이는 곧 모든 조상 모델 인스턴스를 유지해야 함을 
의미한다. (그러나 DOM을 구성하는 것이 아니라면, 전체 모델 인스턴스 트리를 유지할 
필요는 없다.)

= 모델 속성 =
